@using ChessGameClient
@using ChessGameClient.AuthWebAPI;
@using Blazored.LocalStorage
@using ChessGameClient.Services
@inherits AuthenticationComponentModel
@inject IJSRuntime JsRuntime
@inject IAuthService authService
@inject NavigationManager navigationManager


<h3>Authentication</h3>

@code {


    protected override void OnInitialized()
    {
        //authService.TokenAutorization().ContinueWith(t => { if (t.Result) navigationManager.NavigateTo("/"); });
    }
    async void FormSubmitted(EditContext editContext)
    {
        try
        {
            var result = await authService.Autorization(new AccountRequestModel()
            {
                Login = Login,
                Password = Password
            });

            if (result)
                navigationManager.NavigateTo("/");
            else
                await JsRuntime.InvokeVoidAsync("alert", "Неверный логин или пароль!");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}

<EditForm class="form-background" Model="@this" OnValidSubmit="@FormSubmitted">
    <DataAnnotationsValidator />
    <table>
        <tr>
            <td><label for="login">Login</label></td>
            <td><input id="login" type="text" name="login" @bind-value="Login" /></td>
            <ValidationMessage For=@(() => Login) />
            </tr>
            <tr>
                <td><label for="password">Password</label></td>
                <td><input id="password" type="password" name="password" @bind-value="Password" /></td>
                <ValidationMessage For=@(() => Password) />
            </tr>
            <tr>
                <td>
                    <input class="btn btn-primary btn-link" type="submit" value="Login" />
                    <NavLink class="btn btn-secondary" type="button" href="authorization/reg">Register</NavLink>
                </td>
            </tr>
      </table>
</EditForm>